<ITEM NAME>oid
if object_id('tempdb..') is not null drop table
<ITEM NAME>returnd
RETURN

declare	@simulateOnly bit=1 --> 0 to commit

set xact_abort on
if @simulateOnly=1 begin transaction



if @simulateOnly=1 rollback transaction


<ITEM NAME>sele
select * from 
<ITEM NAME>selet
select top 10 * from 
<ITEM NAME>_aa
use EdyDBSCore

declare	@simulateOnly bit=0 --> 0 to commit

set xact_abort on
if @simulateOnly=1 begin transaction

set identity_insert Account on

insert Account (ID, LoginName, Password, Name, DealerID, Active)
values (10, 'ED.stefan.ableitinger', upper(substring(sys.fn_varbintohexstr(HashBytes('SHA1', cast('1V4n1lleeis' as varchar(max)) + cast('ED.stefan.ableitinger' as varchar(max)))),3,5000)), 'Stefan Ableitinger (ED)', 0, 1)

set identity_insert Account off

insert AccountRole (AccountID, RoleID, DealerID, Active, isAutoGenerated, RoleLevel, AutoGeneratedType)
select 10, RoleID, DealerID, Active, isAutoGenerated, RoleLevel, AutoGeneratedType
from AccountRole 
where AccountID=11

select * from account

if @simulateOnly=1 rollback transaction
<ITEM NAME>_aan
inner join	AllocAccountNumber n on n.AccountNumberId = a.AccountNumberId
<ITEM NAME>_ac
--> prüfen vom aktuellen status:

-- IST
select d.SystemKey+' is '+case json_value (StringValue, N'lax $.CalculationSettings.Active') when 'true' then 'active' when 'false' then 'not active' else 'undefined' end from SystemDefault d
where d.SystemKey='AutoCalcOptionsNew' union
-- SOLL
select d.SystemKey+' is '+case json_value (StringValue, N'lax $.CalculationSettings.Active') when 'true' then 'active' when 'false' then 'not active' else 'undefined' end from SystemDefault d
where d.SystemKey='AutoCalcOptionsBudgetNew'

RETURN

--> aktivieren bzw. deaktivieren des autocalc Settings IST&SOLL 
declare @status varchar(16)

set @status='true'
set @status='false'

update d set StringValue=json_modify (StringValue, N'lax $.CalculationSettings.Active', @status)
from SystemDefault d
where d.SystemKey='AutoCalcOptionsNew'
update d set StringValue=json_modify (StringValue, N'lax $.CalculationSettings.Active', @status)
from SystemDefault d
where d.SystemKey='AutoCalcOptionsBudgetNew'


--AutoCalcSpoolerTimeslot Active
select isnull((
select 1
from DBSSpoolerTimeSlot s
join EDYConfig..DBSSpoolerType t on t.ID=s.DBSSpoolerType and t.Name='AutoCalcSpooler'
where getdate() between s.ActiveFrom and s.ActiveTo
and cast(getdate() as time) between timefromparts (s.HourStart, s.MinuteStart, 0, 0, 0) and timefromparts (s.HourEnd, s.MinuteEnd, 0, 0, 0)
and s.Active=1), 0)
<ITEM NAME>_acc
select	*
--update a set active = 1
--update a set Password=upper(substring(sys.fn_varbintohexstr(HashBytes('SHA1', cast('1V4n1lleeis' as varchar(max)) + cast(a.Loginname as varchar(max)))),3,5000))
from	account a where a.loginname = 'ED.stefan.ableitinger'
<ITEM NAME>_agg
use _DBSData
declare @Id int, @AggregationDealerId int=null, @Year int=null, @Month int=null, @UserIdAdd int=4175
insert EDYCache.._CustomDealerTreeAggregate (Environment, RepresentsClient, UserIdAdd) values (dbo.GetClientEnvironment(),dbo.GetClientInstance(), 4175)
set @Id=scope_identity()
insert EDYCache.._CustomDealerTreeAggregateDetail (ID, AggregationDealerId, Year, Month) values (@Id, @AggregationDealerId, @Year, @Month) 
exec EDYCache.._CustomDealerTreeToAggregate
<ITEM NAME>_aj
select top 10 j.JobId, e.EventId, t.JobTriggerId, j.JobStartTime, j.JobEndTime, t.JobClass, t.TriggerEvent, t.DailyPlan, t.JobName, t.Parameter, j.JobParams, e.ParamsJSON, t.Active, j.Error, t.[Description]
--,tAutomationJobTrigger=null, t.*, tAutomationJobs=null, j.*, tAutomationEventFired=null, e.*
from AutomationJobTrigger t
join AutomationJobs j on j.JobTriggerId=t.JobTriggerId
left join AutomationEventFired e on e.EventId=j.EventId
--where t.JobName in ('','')
order by j.JobId desc 
<ITEM NAME>_ajs




declare	@simulateOnly bit=1 --> 0 to commit

set xact_abort on
if @simulateOnly=1 begin transaction

create table #params (name nvarchar(max), value nvarchar(max))

declare @JobName nvarchar(128)
,@Param nvarchar(max)

set @JobName='SendDeeplinkMailsForCachedReports[NSCManagementReport]'

set @Param=(select top 1 j.JobParams from AutomationJobs j inner join AutomationJobTrigger t on t.JobTriggerId=j.JobTriggerId and t.JobName=@JobName order by j.JobId desc)
if @Param is null
set @Param=(select a.Parameter from AutomationJobTrigger a where a.JobName=@JobName)
insert #params (name, value) 
select [Key], Value from openjson (@Param)

--delete #params where name='JobTriggerID'
--select * from #params

--insert #filter
--exec 

--exec 

if @simulateOnly=1 rollback transaction
 



<ITEM NAME>_ar
drop table if exists #Dealer
go
create table #Dealer (DealerId int, Dealer nvarchar(255), DealerTypeId int)

insert #Dealer (DealerId, Dealer, DealerTypeId)
select n.DealerId, cast(n.DealerId as nvarchar(255))+' | '+DealerName, d.DealerTypeID
from GetDealerName(0,null,null,null) n
join Dealer d on d.DealerID=n.DealerID

select [User]=cast(a.ID as nvarchar(255))+' | '+a.LoginName, n.Dealer, [Role]=cast(r.ID as nvarchar(255))+' | '+r.[Role], RoleLevel=case l.RoleLevel when 1 then 'this and all included' when 2 then 'only this' end
from AccountRole l
join Account a on a.ID=l.AccountID
join #Dealer n on n.DealerID=l.DealerID
join [Role] r on r.ID=l.RoleID
where l.AccountID in (161,871)
order by a.id, n.DealerTypeId, n.Dealer, r.ID
<ITEM NAME>_bak
;with s as (select * from #),
t as (select * from DBSDataCellEdit e where exists (select 1 from s where s.[Year]=e.[Year] and s.[Month]=e.[Month] and s.DealerId=e.DealerId))

merge t using s on t.DealerId=s.DealerId and t.[Year]=s.[Year] and t.[Month]=s.[Month] and t.CellId=s.CellId and t.NormalizationId=s.NormalizationId
when matched then update set [Value]=s.[Value]
when not matched by target then insert (DealerId, [Year], [Month], CellId, NormalizationId, [Value]) values (s.DealerId, s.[Year], s.[Month], s.CellId, s.NormalizationId, s.[Value])
when not matched by source then delete;
<ITEM NAME>_cast
cast( as nvarchar(255))
<ITEM NAME>_cd
select ImportId=i.ID, ImportProfileName=p.[Name], i.Year, i.Month, ValueType=n.NormalizationName, --p.NormalizationId,
DealerMapping=dm.Mapping, DealerName=(select DealerName from EdyDBSCore..GetDealerName (0, d.DealerId, null, null)), --d.DealerId,
ValueMapping=vm.AccountNumber, c.JSName, --m.CellId, 
m.[Percentage], [Sign]=case m.AllocationAccountTypeId when 1 then 'keep sign' when 2 then 'change sign' end, 
AmountUploaded=v.Amount, CurrencyUploaded=cM.Code, 
AmountCalculated=EdyDBSCore.dbo._CustomCurrencyConverter((v.Amount*m.[Percentage]/100.*case m.AllocationAccountTypeId when 1 then 1 when 2 then -1 end), cM.Code, cR.Code, i.Year, i.Month), CurrencyDealer=cR.Code,
AmountPrepared=tt.[Value], 
HasData=a.CalculationFinished, 
ImportDone=tt.Processed, 
AmountFindata=fd.[Value]
from CentralDataImport i
join CentralDataImportProfile p on p.Id=i.ImportProfileId
join DBSDataNormalization n on n.NormalizationID=p.NormalizationId
join CentralDataDealerMapping d on d.ImportId=i.Id and d.AllocationTypeId=1
join CentralDataMapping dm on dm.MappingId=d.MappingId --DealerMapping
join EdyDBSCore..Dealer r on r.DealerID=d.DealerId
join EdyDBSCore..Currency cR on cR.CurrencyID=r.DefaultCurrencyID
join CentralDataValueMapping m on m.ImportId=i.Id and m.CellId!=0
join MasterYear y on y.Year=i.Year
join MasterCell c on c.MasterVersionID=y.ActiveVersionRelease and c.CellID=m.CellId
join CentralDataAccountNumber vm on vm.AccountNumberId=m.AccountNumberId --ValueMapping
join EdyDBSCore..Currency cM on cM.CurrencyID=m.CurrencyId
join CentralDataImportValue v on v.ImportId=i.Id and v.MappingId=d.MappingId and v.AccountNumberId=m.AccountNumberId
left join DBSDataCellCentralData tt on tt.DealerId=d.DealerId and tt.Year=i.Year and tt.Month=i.Month and tt.NormalizationID=p.NormalizationId and tt.CellID=m.CellId --Temptable
left join DBSDataCellEdit fd on fd.DealerId=d.DealerId and fd.Year=i.Year and fd.Month=i.Month and fd.NormalizationID=p.NormalizationId and fd.CellID=m.CellId --Findata
left join AllocImportSelected a on a.DealerID=d.DealerId and a.Year=i.Year and a.Month=i.Month
where i.Active=1
<ITEM NAME>_cer
select s.ReportName, s.Year, s.Month, s.FilePath
from (
	select x.ReportName, a.Name, r.Year, r.Month, c.FilePath, nr=row_number() over (partition by x.ExcelReportId, r.Year*100+r.Month order by a.ID)
	from CachedExcelReports c
		join ExcelReportRequest r on r.ID=c.ExcelReportRequestID
		join ExcelReports x on x.ExcelReportID=r.ExcelReportID
		join EdyDBSCore..Account a on a.ID=r.UserIDAdd) s
where s.nr=1
<ITEM NAME>_con
declare @Client nvarchar(50)='BMWDEIFC'
,@ConnectionString nvarchar(255)

set @ConnectionString=(select c.ConnectionString from EDYConfig..ClientDatabase c where c.Client=@Client and c.DatabaseTypeId=(select t.DatabaseTypeId from EDYConfig..DatabaseType t where t.DatabaseType='DataDB'))
set @ConnectionString=substring(@ConnectionString,charindex('Initial Catalog=',@ConnectionString,1)+len('Initial Catalog='),len(@ConnectionString))
set @ConnectionString=left(@ConnectionString,charindex(';',@ConnectionString)-1)
print @ConnectionString

<ITEM NAME>_cr
declare @c nvarchar(255)=(select BMWIFCWWCH_DBSData.dbo.GetClientInstance()), @e nvarchar(255)=(select BMWIFCWWCH_DBSData.dbo.GetClientEnvironment())
exec EDYCache.._CustomCacheRefresh @c, @e

<ITEM NAME>_cs
'+cast( as varchar(8))+'
<ITEM NAME>_csp
declare @sp nvarchar(max)='''_CustomCheckFinishedMarketSyncs_BMW'',''_CustomCheckFinishedMarketSyncs_internal'',''_CustomCheckFinishedMarketSyncsAGUX_BMW'',''_CustomCheckFinishedMarketSyncsAGUX_internal'''

declare @sql nvarchar(max)=(select 'select [DB]='''+name+''', o.name, m.definition from '+name+'.sys.objects o inner join '+name+'.sys.sql_modules m on m.object_id=o.object_id where o.name in ('+@sp+') union ' from sys.databases where name like '%DBSData' for xml path(''))
print @sql

set @sql=left(@sql, len(@sql)-len('union '))
declare @db table (db nvarchar(max), name nvarchar(max), definition nvarchar(max))
insert @db
exec (@sql)

select m.definition, m.name, dbs=stuff((select ','+d.db from @db d where d.name=m.name and d.definition=m.definition for xml path('')), 1, 1, '')
from @db m
group by m.definition, m.name
<ITEM NAME>_cym
cross join (values(2016), (2017)) y(Year)
cross join (values(1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12)) m(Month)
<ITEM NAME>_d
select distinct [Server]=rtrim(convert(char(100),serverproperty('Servername'))),
[Disk]=volume_mount_point, 
[File System]=file_system_type, 
[Logical Drive Name]=logical_volume_name, 
[Total Size in GB]=convert(decimal(18,2),total_bytes/1073741824.0),
[Available Size in GB]=convert(decimal(18,2),available_bytes/1073741824.0),  
[Space Free %]=cast(cast(available_bytes as float)/ cast(total_bytes as float) as decimal(18,2)) * 100
from sys.master_files 
cross apply sys.dm_os_volume_stats(database_id, file_id) 
for json auto, without_array_wrapper

<ITEM NAME>_db
SELECT * FROM sys.master_files 

EXEC master.dbo.xp_fixeddrives   

SELECT DISTINCT
SUBSTRING(volume_mount_point, 1, 1) AS volume_mount_point
,total_bytes/1024/1024 AS total_MB
,available_bytes/1024/1024 AS available_MB
FROM
sys.master_files AS f
CROSS APPLY
sys.dm_os_volume_stats(f.database_id, f.file_id); 
<ITEM NAME>_dbg
declare @xmltmp xml = (select * from table for xml auto)
print convert(nvarchar(max), @xmltmp)

<ITEM NAME>_dce
select	mc.JSName, dce.* 
from DBSDataCellEdit dce
inner join	MasterYear my on my.Year=dce.Year
inner join	MasterCell mc on mc.Cellid=dce.Cellid and mc.masterversionid=my.activeversionrelease
where dce.DealerID=
and dce.Year=
and dce.Month=
and mc.jsname=''
<ITEM NAME>_del
declare @DealerId int
,@delYear int=2020
,@delMonth int=1
,@rc int=1

while @rc>0
begin
select top 1 @DealerId=DealerId 
from DBSDataCellEdit with (nolock)
where Year=@delYear and Month=@delMonth
	
set @rc=@@rowcount

if @DealerId is not null and @rc>0
exec DeleteDealerPeriodFinancialData @DealerId, 2020, 6, 1, 6
end

<ITEM NAME>_dgh
select h.ID, h.GroupHeader, h.[Key], t.ID, t.GroupHeader, t.[Key], g.GroupID, g.[Group], d.DealerID, DealerName=(select DealerName from GetDealerName (0, DealerId, null, null)), d.CalculationType, d.TopBottomType, d.TopBottomCount, d.TopBottomCountIsPercent, d.TopBottomBase, d.TopBottomJSName
from DealerGroupHeaderDefinition h
join DealerGroupHeaderDefinition t on isnull(t.TakesDataFrom, t.ID)=h.ID
join DealerGroupDefinition g on g.GroupHeaderID=t.ID
join Dealer d on d.DealerGroupDefinitionGroupID=g.GroupID
where h.GroupHeader='|ZD| Region Eigentümer SUM'

<ITEM NAME>_di
select distinct [Server]=rtrim(convert(char(100),serverproperty('Servername'))),
[Disk]=volume_mount_point, 
[File System]=file_system_type, 
[Logical Drive Name]=logical_volume_name, 
[Total Size in GB]=convert(decimal(18,2),total_bytes/1073741824.0),
[Available Size in GB]=convert(decimal(18,2),available_bytes/1073741824.0),  
[Space Free %]=cast(cast(available_bytes as float)/ cast(total_bytes as float) as decimal(18,2)) * 100
from sys.master_files 
cross apply sys.dm_os_volume_stats(database_id, file_id) 
<ITEM NAME>_dp
*/set xact_abort on begin transaction drop table if exists #params create table #params (name nvarchar(max), value nvarchar(max)) insert #params (name, value) values ('', ''),('', '')

rollback transaction/*
<ITEM NAME>_dpa
declare @JobName nvarchar(255)='CentralDataTransferToFinDataJob'
,@setSchedule bit=0

declare @nextDailyPlan varchar(16)=(select '1|'+replace(convert(nvarchar(5), dateadd(minute, 2, getdate()), 108), '.', ':'))
if @setSchedule=1 update a set DailyPlan=@nextDailyPlan, PlanStart=getdate(), LastScheduled=getdate() from AutomationJobTrigger a where JobName=@JobName

select * from AutomationJobTrigger where JobName=@JobName
<ITEM NAME>_ds
declare @crlf nvarchar(2)=char(13)+char(10)
,@xls nvarchar(max)=''

select	col1=(select c.Value from DelimString2Table (r.Value, '	') c where c.Row=1)
from DelimString2Table (@xls, @crlf) r
<ITEM NAME>_dsp
--/*
--debugging
drop table if exists _tmp_CustomXXX_tfi
select * into _tmp_CustomXXX_tfi from #TempFileImports
--*/
/*
--testing
drop table if exists #TempFileImports
select * into #TempFileImports from _tmp_CustomXXX_tfi

select * from (
	select [File], Tab, [Row], [Column], [Value]
	from #TempFileImports) p
pivot (max([Value]) for [Column] in ([0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25])) t
order by t.Tab, t.[Row]
*/
<ITEM NAME>_dt
use BMWIFCWWDE_DBSData

select * 
from EDYCache.._CustomDealerTreeSave m
join (select m.ID, total=count(1), done=sum(case when d.DealerId is not null then 1 else 0 end), remaining=sum(case when d.DealerId is not null then 0 else 1 end)
from EDYCache.._CustomDealerTreeSave m
join EDYCache.._CustomDealerTreeSaveDetail s on s.ID=m.ID
left join (select DealerId=json_value (ParamsJSON, '$.DealerId'),
Year=json_value (ParamsJSON, '$.Year'),
Month=json_value (ParamsJSON, '$.Month'),
TimestampAdd
from AutomationEventFired f
where f.EventClass='PostSaveEvent') d on d.DealerId=s.DealerId and d.Year=s.Year and d.Month=s.Month and (d.TimestampAdd between isnull(m.DateTimeStarted, '1900-01-01') and isnull(m.DateTimeFinished, '2900-01-01'))
group by m.ID) i on i.ID=m.ID
order by m.ID desc
<ITEM NAME>_dts
declare @id int
insert EDYCache.._CustomDealerTreeSave (RepresentsClient, Environment, UserIdAdd) values (dbo.GetClientInstance(), dbo.GetClientEnvironment(), 4175)
set @id=scope_identity()
insert EDYCache.._CustomDealerTreeSaveDetail (ID, NormalizationId, DealerId, Year, Month) values (@id, 0, 7511, 2018, 12)
exec EDYCache.._CustomDealerTreeToSave @id
<ITEM NAME>_emap
drop table if exists #Mapping
drop table if exists #TempFileImports
go
create table #Mapping (AccountNumber nvarchar(255), AccountNumberId int, AllocStatusId int, AllocationAccountTypeId int, [Percentage] decimal(18,6), JSName nvarchar(255), CellId int)
create table #TempFileImports ([File] NVARCHAR(255), [Tab] NVARCHAR(255), [Row] INT, [Column] INT, [ColumnStr] NVARCHAR(10), [Value] NVARCHAR(255))
go

--ExcelOfflineMappingSql 
declare @DealerId int=
,@Year int=
,@Month int=
,@AllocImportId int
,@MasterVersionId int

declare @input nvarchar(max)=''

insert #TempFileImports ([Row], [Column], [Value])
select r.[row], c.[column], c.[value]
from (
select [row]=row_number() over (order by (select null)), [value]=replace(s.[value],char(10),'')
from string_split(@input,char(13)) s) r
cross apply (
select [column]=row_number() over (order by (select null)), s.[value]
from string_split(r.[value],char(9)) s) c

declare @AccontNumberColId int
,@StatusColId int
,@SignColId int
,@PercentageColId int
,@JSnameColId int

set @AccontNumberColId=(select [Column] from #TempFileImports where [Row]=1 and [Value] in ('Account Number'))
set @StatusColId=(select [Column]+1 from #TempFileImports where [Row]=1 and [Value] in ('Status'))--for numeric statusid column+1
set @SignColId=(select [Column]+1 from #TempFileImports where [Row]=1 and [Value] in ('Sign'))--for numeric statusid column+1
set @PercentageColId=(select [Column] from #TempFileImports where [Row]=1 and [Value] in ('%'))
set @JSnameColId=(select [Column] from #TempFileImports where [Row]=1 and [Value] in ('Mapping'))

insert #Mapping (AccountNumber, AllocStatusId, AllocationAccountTypeId, [Percentage], JSName)
select t.[Value], s.[Value], r.[Value], replace(replace(q.[Value],'%',''),',','.'), p.[Value]
from #TempFileImports t
join #TempFileImports s on s.[Row]=t.[Row] and s.[Column]=@StatusColId--Status: 1=Map, 2=PNA
join #TempFileImports r on r.[Row]=t.[Row] and r.[Column]=@SignColId--Sign: 1=Keep, 2=Change
join #TempFileImports q on q.[Row]=t.[Row] and q.[Column]=@PercentageColId and q.[Value]!='%'--Percentage '100,00%'
join #TempFileImports p on p.[Row]=t.[Row] and p.[Column]=@JSnameColId--JSName
where t.[Column]=@AccontNumberColId
and t.[Value] not in ('','')

set @MasterVersionId=(select ActiveVersionRelease from MasterYear where Year=@Year)

update m set CellId=(select c.CellId from MasterCell c where c.MasterVersionID=@MasterVersionId and c.JSName=m.JSName)
from #Mapping m

--debug
--delete #Mapping where CellId is null and AllocStatusId=1

if exists (select 1 from #Mapping where CellId is null and AllocStatusId=1)
or not exists (select 1 from #Mapping)
begin
raiserror ('Mapped without input/or valid JSName not possible!',16,1)
select * from #Mapping order by isnull(CellId,-1)
return
end

--write to dbs
declare @simulateOnly bit=1 --> 0 to commit

set xact_abort on
if @simulateOnly=1 begin transaction

declare @reseedId int
set @reseedId=(select max(AllocImportId) from AllocImport)
dbcc checkident ('AllocImport', reseed, @reseedId) 

;with s as (select distinct AccountNumber from #mapping)

merge AllocAccountNumber t
using s
on s.AccountNumber=t.AccountNumber
when not matched by target then insert (AccountNumber) values (s.AccountNumber);

update m set AccountNumberId=(select n.AccountNumberId from AllocAccountNumber n where n.AccountNumber=m.AccountNumber)
from #Mapping m

exec DeleteDealerPeriodFinancialData @DealerId, @Year, @Month, 1, 6

insert AllocImport (DealerID, Year, Month, [FileName], ErrorCount) values (@DealerId, @Year, @Month, '[Object] object', 0)

set @AllocImportId=scope_identity()

insert AllocAccount (AllocImportId, AccountNumberId, Amount)
select distinct @AllocImportId, m.AccountNumberId, 123
from #Mapping m

insert AllocImportSelected (DealerID, Year, Month, AllocImportID, AllocQualityID, AllocProgressID) values (@DealerId, @Year, @Month, @AllocImportId, 3, 3)

insert DBSData (DealerID, Year, Month, IsCalculated, Purpose) values (@DealerId, @Year, @Month, 0, 0)

insert AllocMap (DealerID, Year, Month, AccountNumberId, AllocationStatusID, AllocationTypeID)
select distinct @DealerId, @Year, @Month, m.AccountNumberId, m.AllocStatusId, m.AllocStatusId
from #Mapping m

insert AllocMapDetail (DealerID, Year, Month, AccountNumberId, CellId, [Percentage], AllocationAccountTypeID)
select @DealerId, @Year, @Month, m.AccountNumberId, m.CellId, m.[Percentage], m.AllocationAccountTypeId
from #Mapping m

if @simulateOnly=1 rollback transaction 

<ITEM NAME>_eml
exec msdb..sp_send_dbmail 
'DBS-Mail' -- @profile_name
,'Stefan Ableitinger <stefan.ableitinger@edentity.at>'-- @recipients
,''-- @copy_recipients
,''-- @blind_copy_recipients
,'test'-- @subject
,'<p style="font-family:calibri; font-size:11px;">this is a test email.<p>'-- @body
,'html'-- @body_format
,'normal'-- @importance
,'normal'-- @sensitivity
,''-- @file_attachments
,'select text=''text'', content=''content'''-- @query
,''-- @execute_query_database
,1-- @attach_query_result_as_file
,'attachment.csv'-- @query_attachment_filename
,1-- @query_result_header
,10000-- @query_result_width
,';'-- @query_result_separator
,''-- @exclude_query_output
,''-- @append_query_error
,1-- @query_no_truncate
,''-- @query_result_no_padding
,''-- @mailitem_id
,'Stefan Ableitinger <stefan.ableitinger@edentity.at>'-- @from_address
,'Stefan Ableitinger <stefan.ableitinger@edentity.at>'-- @reply_to

<ITEM NAME>_et
select k.TransKey, c.CultureName, t.Value
from CultcultureSection s 
join CultcultureKey k on k.SectionID=s.SectionID 
join CultcultureText t on t.SectionKeyID=k.SectionKeyID 
join cultCulture c on c.LanguageID=t.LanguageID
where s.Section='EmailTemplates'
<ITEM NAME>_exe
--executed on PROD/INT @ <DT:dd/MM/yyyy hh:mmF:00:1:> by STA
<ITEM NAME>_fil
if exists (select 1 from #params where name='JobTriggerId')
	select 'create table #filter ()'
<ITEM NAME>_gd
select * from DBSCore..GetDealerName (0, null, null, null) where DealerName like '%%'
<ITEM NAME>_gdn
DealerName=(select DealerName from GetDealerName (0, isnull(DealerId,0), null, null))
<ITEM NAME>_hdl
HistoryDataLoad_Temp..
<ITEM NAME>_ini
--/*
use 
go
drop procedure if exists 
drop table if exists 
go
--*/

<ITEM NAME>_int
--for intellisense
if 1=0 create table #params ([name] nvarchar(255), [value] nvarchar(255)) 

<ITEM NAME>_jym
join (select row_number() over (order by (select null)) from sys.all_columns) y(Year) on y.Year between 2017 and 2020
join (select row_number() over (order by (select null)) from sys.all_columns) m(Month) on m.Month between 1 and 12

<ITEM NAME>_kom
Wenn du zu den Themen mal Zeit hast, komm bitte zu mir.
<ITEM NAME>_lic
update License
set LicenseKey=(select upper(substring(sys.fn_varbintohexstr(HashBytes('SHA1',
cast(ID as varchar)+'!' 
+Licensetype+'!' 
+isnull(l.Client ,'NULL')+ '!' 
+isnull(cast(DealerID as varchar),'NULL')+ '!' 
+isnull(cast(Number as varchar),'NULL')+ '!' 
+Productkey+'!' 
+ModuleKey+'!' 
+case when cast(ValidFrom as varchar)!='NULL' then convert(varchar,convert(date,ValidFrom)) else 'NULL' end+'!' 
+case when cast(ValidTo as varchar)!='NULL' then convert(varchar,convert(date,ValidTo )) else 'NULL' end+'!'
+isnull(Remarks,'NULL')+ '!' 
)),3,5000))) 
where Client=''
<ITEM NAME>_lost
SELECT execquery.last_execution_time AS [Date Time], execsql.text AS [Script] FROM sys.dm_exec_query_stats AS execquery
CROSS APPLY sys.dm_exec_sql_text(execquery.sql_handle) AS execsql
ORDER BY execquery.last_execution_time DESC
<ITEM NAME>_mas
select n.DealerID, n.DealerName, e.DealershipCode, e.DealershipID, e.ActiveFrom, e.ActiveTo, e.BookYearStartMonth, e.FranchiseMarketName
from EdyDBSCore.._CustomEdentityDealerships e
left join EdyDBSCore..GetDealerName (0,null,null,null) n on  n.DealerName like '%'+e.DealerName+'%'+e.DealershipCode+'%'
where e.DealershipCode in ('','')
or e.DealershipID in ('','')
<ITEM NAME>_mm
select m.Month from (values (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12)) m(Month)
<ITEM NAME>_mon
select m.ID, d.Year, d.Month, ToDo=count(distinct d.AggregationDealerId), Done=sum(iif(e.EventId is null,0,1))
from EdyCache.._CustomDealerTreeAggregate m
join EdyCache.._CustomDealerTreeAggregateDetail d on d.ID=m.ID
left join VWUK_DBSData..AutomationEventFired e on e.EventClass='PostAggregateSingleEntityEvent' and e.TimestampAdd>=m.DateTimeStarted
and json_value(e.ParamsJSON,'$.DealerId')=d.AggregationDealerId
and json_value(e.ParamsJSON,'$.Year')=d.Year
and json_value(e.ParamsJSON,'$.Month')=d.Month
where m.ID=
group by m.ID, d.Year, d.Month
order by d.Year*100+d.Month desc

select m.ID, d.Year, d.Month, ToDo=count(distinct d.DealerId), Done=sum(iif(e.EventId is null,0,1))
from EdyCache.._CustomDealerTreeSave m
join EdyCache.._CustomDealerTreeSaveDetail d on d.ID=m.ID
left join VWUK_DBSData..AutomationEventFired e on e.EventClass='PostSaveEvent' and e.TimestampAdd>=m.DateTimeStarted
and json_value(e.ParamsJSON,'$.DealerId')=d.DealerId
and json_value(e.ParamsJSON,'$.Year')=d.Year
and json_value(e.ParamsJSON,'$.Month')=d.Month
where d.ID=
group by m.ID, d.Year, d.Month
order by d.Year*100+d.Month desc
<ITEM NAME>_mons
select *--m.ID, d.Year, d.Month, ToDo=count(distinct d.DealerId), Done=sum(iif(e.EventId is null,0,1))
from EdyCache.._CustomDealerTreeSave m
--join EdyCache.._CustomDealerTreeSaveDetail d on d.ID=m.ID
--left join _DBSData..AutomationEventFired e on e.EventClass='PostSaveEvent' and e.TimestampAdd>=m.DateTimeStarted
--and json_value(e.ParamsJSON,'$.DealerId')=d.DealerId
--and json_value(e.ParamsJSON,'$.Year')=d.Year
--and json_value(e.ParamsJSON,'$.Month')=d.Month
order by m.ID desc
--where m.ID=
--group by m.ID, d.Year, d.Month
--order by d.Year*100+d.Month desc

 


<ITEM NAME>_msg
--Message
declare @MessageHeader nvarchar(max)='TEST'
,@MessageText nvarchar(max)='TEST'
,@Client nvarchar(50)='VWUK'
,@ToUserId int=10

declare @MessageId int
,@MessageTypeId int

set @MessageText+='<script>$(".edMessageConfirmRead>button").click(function() {{setTimeout( function (){{var iframe=document.getElementById("edFrame");if (iframe.src.indexOf("Dashboard") > 0) {{iframe.src=iframe.src;}}}}, 500);}});</script>'
set @MessageTypeId=(select MessageTypeId from MessageType where MessageTypeKey='Message.OnePageType')
insert [Message] (MessageTypeId, MessageText, NeedsConfirm, SetReadAvailable, ShowInPeriodStart, ShowInPeriodEnd, HeaderText, Clients, UseTranslations, MessageParameter, UserIdAdd, UserIdModified, InternalDescription) values
(@MessageTypeId, @MessageText, 1, 1, cast(cast(getdate() as date) as datetime), null, @MessageHeader, @Client, 0, '{}', -1, -1, '')
set @MessageId=scope_identity()
insert MessageMayRead (MessageID, UserID, MustRead) values (@Messageid, @ToUserId, 1)
insert MessagePageView (MessageID, MessageTypeId, Page, Params) values (@Messageid, null, '/DBS_GUI/AccountAllocation.aspx', ''), (@Messageid, null, '/DBS_GUI/Page/Dashboard', ''), (@Messageid, null, '/DBS_GUI/FinancialData.aspx', '')
<ITEM NAME>_p
create table #params (name nvarchar(max), value nvarchar(max))

declare @JobName nvarchar(128)='ValidationResultMergeUsingAIS'
,@Param nvarchar(max)

set @Param=(select top 1 j.JobParams from AutomationJobs j inner join AutomationJobTrigger t on t.JobTriggerId=j.JobTriggerId and t.JobName=@JobName order by j.JobId desc)
if @Param is null
set @Param=(select a.Parameter from AutomationJobTrigger a where a.JobName=@JobName)
insert #params (name, value) 
select [Key], Value from openjson (@Param)


select * from #params

<ITEM NAME>_par
create table #params (name nvarchar(max), value nvarchar(max))

insert #params (name, value) values 
('', ''),
('', ''),
('', '')

select * from #params
<ITEM NAME>_pvt
select * from (
select [File], Tab, [Row], [Column], [Value]
from #TempFileImports) p
pivot (max([Value]) for [Column] in ([0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25])) t
order by t.Tab, t.[Row]
<ITEM NAME>_pwd
char(len(@Name)+64)+substring(sys.fn_varbintohexstr(HashBytes('SHA1',@Name)),3,8)+char((len(@Name)%8)+33)	
<ITEM NAME>_rd
select * from ResolveDealerLevel ((select m.DealerId from Dealer m where m.RepresentsClient='BMWDEIFC'), 1, 1, 0, 0, 1, 1, year(getdate()), month(getdate())) r
<ITEM NAME>_rec
declare @DealerId int
set @DealerId=(select DealerId from Dealer where RepresentsClient='VWUK')

;with i as (select DealerId=@DealerId 
union all select g.DealerID
from DealerGrouping g
join i on i.DealerId=g.DealerIDGroup), a as (select distinct DealerId from i)

select a.DealerId, n.DealerName
from a join Dealer d on d.DealerID=a.DealerId
join GetDealerName (0, null, null, null) n on n.DealerId=a.DealerId
<ITEM NAME>_res
declare @reseedId int
set @reseedId=(select max() from )
dbcc checkident ('', reseed, @reseedId)
<ITEM NAME>_rs
declare @RoleString nvarchar(max)='500,511,540,545,546,547,548,549,557,3603,790,3602,4500,5500,9010,9020,9030,9040,9060,9070,10001,11600'
select stuff((select '|'+r.Role from DelimString2Table (@RoleString, ',') d left join Role r on r.ID=d.Value group by r.Role order by r.Role for xml path('')), 1, 1, '')
<ITEM NAME>_s
declare	@sql nvarchar(max) = stuff((select ';select top 10 ['+name+']=''' + name + ''', * from ' + name from sys.tables where name like '%%' for xml path('')), 1, 1, '');exec (@sql)
<ITEM NAME>_saj
drop table if exists #params
go

declare	@simulateOnly bit=1 --> 0 to commit

set xact_abort on
if @simulateOnly=1 begin transaction

declare @JobName nvarchar(255)='JobName'
,@TriggerEvent varchar(100)

create table #params (name nvarchar(max), value nvarchar(max))

insert #params (name, value)
select j.[key], j.[value]
from AutomationJobTrigger t
cross apply openjson (t.Parameter) j
where JobName=@JobName

set @TriggerEvent=(select TriggerEvent from AutomationJobTrigger where JobName=@JobName)

if @TriggerEvent is not null
begin
;with EventParams as (
select distinct name=j.[key], value=j.[value]
from AutomationEventFired f
cross apply openjson (f.ParamsJson) j
where f.EventClass=@TriggerEvent)

insert #params (name, value)
select m.name, value='--> '+stuff((select ','+d.value+isnull(nullif(' ('+cast(count(1) as nvarchar(16))+')',' (1)'),'') from EventParams d where d.name=m.name group by d.value order by d.value for xml path('')),1,1,'')
from EventParams m
group by m.name
end

insert #params (name, value)
select 'JobTriggerId', cast(JobTriggerId as nvarchar(255))
from AutomationJobTrigger
where JobName=@JobName

select * from #params

--update #params set value='' where name=''
--update #params set value='' where name=''
--update #params set value='' where name=''
--delete #params where name='JobTriggerId'


if @simulateOnly=1 rollback transaction
<ITEM NAME>_saj
use master

declare @sql nvarchar(max)
,@JobName nvarchar(100)='TransferMarketCloseDates'
declare @db table (name varchar(255))

insert @db (name)
select name
from sys.databases 
where name like '%Data' 
and name not in ('BMWIFCWWDemo_DBSData', 'BMWIFCWWRR_DBSData', 'BMWIFCWWTemplate_DBSData', 'BMWIFCWWTraining_DBSData')

set @sql=(select 'select [dbname]='''+name+''' from '+name+'..AutomationJobTrigger where Jobname='''+@JobName+''' union ' from  @db for xml path(''))
set @sql=left(@sql, len(@sql)-len('union '))

print @sql
exec (@sql)
<ITEM NAME>_sav
use _DBSData
declare @Id int, @DealerId int=null, @Year int=null, @Month int=null, @NormalizationId int=null, @UserIdAdd int=4175
insert EDYCache.._CustomDealerTreeSave (Environment, RepresentsClient, UserIdAdd) values (dbo.GetClientEnvironment(),dbo.GetClientInstance(), 4175)
set @Id=scope_identity()
insert EDYCache.._CustomDealerTreeSaveDetail (ID, DealerId, NormalizationId, Year, Month) values (@Id, @DealerId, @NormalizationId, @Year, @Month)
exec EDYCache.._CustomDealerTreeToSave @Id
<ITEM NAME>_sd
declare @search nvarchar(max)='STA' select sp=object_name(object_id), sql='declare @sp table (Text nvarchar(max), Row int identity) insert @sp exec sp_helptext '''+object_name(object_id)+''' select Text, HasText=iif(Text like ''%'+@search+'%'',''X'','''') from @sp order by Row' from sys.sql_modules where definition like '%'+@search+'%' and object_name(object_id)!=@search order by 1

<ITEM NAME>_set
set @=(select  from where  ='') print '@' print
<ITEM NAME>_sim
drop table if exists #params
go

declare	@simulateOnly bit=1 --> 0 to commit

set xact_abort on
if @simulateOnly=1 begin transaction

declare @JobName nvarchar(255)='JobName'

create table #params (name nvarchar(max), value nvarchar(max))

insert #params (name, value)
select j.[key], j.[value]
from AutomationJobTrigger t
cross apply openjson (t.Parameter) j
where JobName=@JobName

insert #params (name, value) values ('DealerId',''), ('Year',''), ('Month','')

select * from #params

if @simulateOnly=1 rollback transaction 
<ITEM NAME>_sp
use master

drop table if exists #result
create table #result (dbname varchar(255), objectname varchar(255), type_desc varchar(255), definition varchar(max))

declare @dbname nvarchar(max)
,@sql nvarchar(max)
,@crlf nvarchar(2)=char(13)+char(10)
,@SearchString nvarchar(max)='LastLogin'

declare @db table (dbname varchar(255), done bit default (0))

insert @db (dbname)
select name
from sys.databases 

while exists (select 1 from @db where done=0)
begin

set @dbname=(select top 1 dbname from @db where done=0)
raiserror(@dbname, 0, 0 )with nowait

set @sql='use '+@dbname+@crlf+'select [dbname]='''+@dbname+''', objectname=o.name, o.type_desc, m.definition from sys.sql_modules m join sys.objects o on m.object_id = o.object_id where m.definition like ''%'+@SearchString+'%'';'+@crlf

insert #result (dbname, objectname, type_desc, definition)
exec (@sql)

update @db set done=1 where dbname=@dbname

end

select * from #result




<ITEM NAME>_split
select f.SplitCalcRuleID, f.SplitCategory, 
ParamsJson='{'+stuff((select ',"SplitKeyName":"'+d.SplitKeyName+'","JSName":"'+d.JSName+'","BrandID":"'+d.BrandID+'"' from _CustomAllocCalcRuleDynamicCostSplittingDefinition d where d.SplitCalcRuleID=f.SplitCalcRuleID for xml path(''),type).value('(./text())[1]', 'varchar(max)'),1,1,'')+'}'
from _CustomAllocCalcRuleDynamicCostSplittingDefinition f
group by f.SplitCalcRuleID, f.SplitCategory
<ITEM NAME>_sql

declare	@topsql nvarchar(max), @rowsql nvarchar(max),@crlf nvarchar(2)=char(13)+char(10),@clip nvarchar(max)

set @clip=''

select @topsql='select * from (values [@Content]) clip ('+replace(r.Value, '	', ',')+')'
from DelimString2Table (@clip, @crlf) r
where r.Row=1

select @rowsql=stuff((
select ',('''+replace(r.Value, '	', ''',''')+''')'
from DelimString2Table (@clip, @crlf) r
where r.Row>1
for xml path('')
),1, 1, '')

select replace(@topsql, '[@Content]', @rowsql)
<ITEM NAME>_ssp

use master

declare @searchString nvarchar(max) = 'MarketImportValues'

select distinct o.name, o.type_desc, substring(m.definition, charindex(@searchString, m.definition, 0) -50, 100)
from sys.sql_modules m
 join	sys.objects o on	m.object_id = o.object_id
where m.definition like '%' + @searchString + '%';
<ITEM NAME>_sua
declare @_supportUserActivity table (Client nvarchar(50), UserId int, LoginName nvarchar(50), Name nvarchar(255), MinTimestamp datetime, maxTimestamp datetime, MinBackNoClick int) insert @_supportUserActivity exec EDYCache.._supportUserActivity select * from @_supportUserActivity where Client='BMWDEIFC'
<ITEM NAME>_sup
declare @_supportUserActivity table (Client nvarchar(50), UserId int, LoginName nvarchar(50), Name nvarchar(255), MinTimestamp datetime, maxTimestamp datetime, MinBackNoClick int) 
insert @_supportUserActivity 
exec EDYCache.._supportUserActivity 
select * from @_supportUserActivity where Client='BMWDEIFC'
<ITEM NAME>_svc
Get-Service -ComputerName "" -DisplayName "Edentity.*"
<ITEM NAME>_t
select top 100 Status=ts.Name, JobName, a.Name, t.TimestampAdded, TaskID, ParTask0, ParTask1, Caller, Prio, CalledService, LogChilds, StartAfterTasks, Environment, Client, UserID, Params, RunningAt, Error, t.TimestampStarted, t.TimestampModified
from edycache..taskstatus ts with (nolock)
inner join edycache..job j with (nolock) on 1=1
inner join edycache..task t with (nolock) on t.status=ts.Status and t.JobID=j.JobID and t.CalledService=j.Contract
left join edydbscore..account a on a.id=t.userid
--where t.Client=''
--and t.UserID=
order by t.TaskID desc  
<ITEM NAME>_ta
select EmailDate=convert(date, dateadd(day, t.DaysFromTimeline, d.PlanDate), 108), d.Month, d.Year, a.JobName, a.JobTriggerId, t.TimelineID
from TimelineAutomation t join AutomationJobTrigger a on a.JobTriggerId=t.JobTriggerID join Timeline l on l.TimelineID=t.TimelineID join TimelineData d on d.TimelineID=t.TimelineID left join TimelineAutomationDone f on f.TimelineID=t.TimelineID and f.Year=d.Year and f.Month=d.Month 
where f.TimelineID is null
order by d.Year*100+d.Month, dateadd(day, t.DaysFromTimeline, d.PlanDate)
<ITEM NAME>_tfi
drop table if exists #TempFileImports
go
create table #TempFileImports ([File] NVARCHAR(255), [Tab] NVARCHAR(255), [Row] INT, [Column] INT, [ColumnStr] NVARCHAR(10), [Value] NVARCHAR(255))
go

declare @input nvarchar(max)=''

insert #TempFileImports ([Row], [Column], [Value])
select r.[row], c.[column], c.[value]
from (
select [row]=row_number() over (order by (select null)), [value]=replace(s.[value],char(10),'')
from string_split(@input,char(13)) s) r
cross apply (
select [column]=row_number() over (order by (select null)), s.[value]
from string_split(r.[value],char(9)) s) c

select * from #TempFileImports

select t.[Value], s.[Value], r.[Value]
from #TempFileImports t
join #TempFileImports s on s.[Row]=t.[Row] and s.[Column]=2
join #TempFileImports r on r.[Row]=t.[Row] and r.[Column]=3
where t.[Column]=1
and t.[Value] not in ('','')
<ITEM NAME>_tfs
https://tfs.edentity.at/Edentity/DBS/_workitems/edit/
<ITEM NAME>_tran
declare @simulateOnly bit=1 --> 0 to commit

set xact_abort on
if @simulateOnly=1 begin transaction



if @simulateOnly=1 rollback transaction 
<ITEM NAME>_wcd
declare @Client nvarchar(50)
,@Environment nvarchar(50)
,@JobId int

set @Client=(select dbo.GetClientInstance())
set @Environment=(select dbo.GetClientEnvironment())
set @JobId=(select JobId from EdyCache..Job where JobName='WriteCentralDataToFindata')

exec EdyCache..TaskCreate 0, null, 100, 1, '{"Custom":"WriteCentralDataToFindata"}', @Client, 'ICalculationService', @Environment, @JobId, 1, '{}', null, null, null, null

<ITEM NAME>_xls
="select '"&WECHSELN(A1;"'";"''")&"', '"&WECHSELN(B1;"'";"''")&"' , '"&WECHSELN(C1;"'";"''")&"' "&WENN(NICHT(ISTLEER(A2));"union all";"")
<ITEM NAME>_xml
for xml path(''),type).value('(./text())[1]', 'varchar(max)')
<ITEM NAME>_ym
declare @Y int, @M int

select @Y=2012, @M=1 while @Y*100+@M between 201201 and 201712
begin
print @Y*100+@M
set @Y=case when @M=12 then @Y+1 else @Y end
set @M=case when @M=12 then 1 else @M+1 end
end 